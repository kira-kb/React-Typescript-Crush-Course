1. What are Components?
In React, components are the building blocks of the UI. A component is a JavaScript function (or class) that returns JSX. Think of components as reusable chunks of UI that can be composed to create a full application.

There are two types of components:

Function Components: The most common and modern way to create components.
Class Components: An older way, but weâ€™ll focus on function components in this course.
2. Passing Data with Props
Props (short for "properties") allow you to pass data from one component to another, typically from a parent component to a child component. Props are read-only, meaning they cannot be modified by the receiving component.

Example: Parent and Child Components
We will create two components:

A Parent component (App.tsx) that passes data (a name) to a Child component.
A Child component (Greeting.tsx) that receives the name as a prop and displays it.



GreetingProps: Defines the expected type of the name prop as string.
React.FC<GreetingProps>: Ensures the function component receives the correct type for its props.



Props Flow: Props are passed from a parent component (in this case, App.tsx) to a child component (Greeting.tsx).
Read-Only: Props cannot be modified by the child component; they are only used for displaying data.


Component Composition: React allows you to break your app into smaller components, making it easier to maintain and reuse code.
Props in TypeScript: Typing props ensures that data passed between components is valid. This reduces errors and improves the readability of your code.
